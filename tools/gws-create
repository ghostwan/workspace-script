#!/bin/sh

function print_error() {
    printf "\033[0;31m$1\033[0m\n"
}
function print_ok() {
    printf "\033[0;32mOK\033[0m\n"
}
i="\033[0;33m"
e="\033[0m"

display_usage() {
  echo "Create a new repository on gitlab and add it in the workspace"
  echo
  echo "Usage: ${0##*/} <local-path> <repo-name> [subgroup]"
  echo
  echo " -h     Display usage instructions"
  echo " -s     Print available subgroups for the current group"
  echo
  echo "Example: ${0##*/} projects/android/sample my-super-app"
  echo "Example: ${0##*/} projects/android/sample my-super-app sample"
}

display_subgroups() {
    gid=$(curl -s --header "PRIVATE-TOKEN: $token" "https://gitlab.com/api/v4/groups" | jq '.[] | select(.full_path == "'$group'") | .id')
    if [ -z $gid ]; then
        print_error "Group $group doesn't exist! (group=user.branch)"
        # TODO propose to create the group using gitlab api
        print_error "Create this group here (https://gitlab.com/groups/new) or change your workspace branch"
        exit 1
    fi
    result=$(curl -s --header "PRIVATE-TOKEN: $token" "https://gitlab.com/api/v4/groups/$gid/subgroups" | jq '.[] | .path' | sed 's/"//g')
    if [ -n "$result" ]; then
        printf "Subgroups available for current group $group:\n"
        echo "$result"
    else
        print_error "No Subgroups available for current group $group"
    fi
    return $gid
}

cd $WORK
if [ ! -f $WORK/.user.gitlab ]; then
    print_error "Gitlab user not found!"
    read -p "Gitlab user: " user
    echo "$user" > $WORK/.user.gitlab
else
    user=$(<$WORK/.user.gitlab)
fi

if [ ! -f $WORK/.token.gitlab ]; then
    print_error "Gitlab token not found!"
    read -p "Gitlab API token (https://gitlab.com/profile/personal_access_tokens): " token
    echo "$token" > $WORK/.token.gitlab
else
    token=$(<$WORK/.token.gitlab)
fi

workspace_branch=$(git branch | grep \* | cut -d ' ' -f2)
if [[ "$workspace_branch" == "master" ]]; then
    group="$user.private"
else
    group="$user.$workspace_branch"
fi


OPTIND=1
while getopts "h?s" opt; do
    case "$opt" in
        s) display_subgroups >&2; exit 0;;
        h |Â \?) display_usage >&2; exit 0;;
    esac
done
shift $((OPTIND-1))

[ "${1:-}" = "--" ] && shift
if [ $# -le 1 ]; then
    display_usage
    exit 1
fi

localpath=$1
reponame=$2
subgroup=$3

result=$(cat $WORK/.projects.gws | grep "$localpath/$reponame")
if [ -n "$result" ]; then
    print_error "Repository $localpath/$reponame already exist in workspace!"
    exit 1
fi

printf "Create project $i'$reponame'$e in $i'$localpath'$e \n group: $i$group$e \n subgroup: $i$subgroup$e\n"
group_path=$group
if [ -n "$subgroup" ]; then
    group_path="$group/$subgroup"
fi
printf "looking namespace id for $i$group_path$e: "
id=$(curl -s --header "PRIVATE-TOKEN: $token" "https://gitlab.com/api/v4/groups" | jq '.[] | select(.full_path == "'$group_path'") | .id')
if [ -n "$id" ]; then
    printf "$i$id$e\n"
else
    print_error "id not found"
    display_subgroups
    gid=$?
    print_error "Subgroup $subgroup doesn't exist!"
    # TODO propose to create the subgroup using gitlab api
    if [ -n "$gid" ]; then
        print_error "You can create this subgroup here https://gitlab.com/groups/new?parent_id=4979560"
    fi
    exit 1
fi


printf "Do you want to create repostitory $i$reponame$e in $i$group_path$e ? ([Y]es or [n]o)"
read -p ": "
case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
    n|no) echo "bye!" && exit 0 ;;
    *) ;;
esac

printf "Creating $i$reponame$e..."
result=$(curl -s --header "PRIVATE-TOKEN: $token" -H "Content-Type: application/json" -d '{"name":"'$reponame'","public":"false","namespace_id":'$id'}' "https://gitlab.com/api/v4/projects")
error=$( echo $result | jq '.message.name[0]')
if [[ $error == *"has already been taken"* ]]; then
    print_error "Error: repository already exist"
    exit 1
elif [[ "$error" != "null" ]]; then
    print_error "Error: $error"
    exit 1
fi
print_ok

url=$( echo $result | jq '.http_url_to_repo' | sed 's/"//g')

printf "Adding path $i$localpath/$reponame$e for repo $i$url$e in .project.gws..."

if [ -n "$(tail -c 1 "$WORK/.projects.gws")" ]; then
    echo "" >> $WORK/.projects.gws
fi

echo "$localpath/$reponame | $url" >> $WORK/.projects.gws
print_ok

printf "Fetching repo $i$reponame$e...\n"
gws-update
