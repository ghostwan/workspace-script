#!/bin/sh

function print_error() {
    printf "\033[0;31m $1 \033[0m\n"
}
function print_ok() {
    printf "\033[0;32mOK\033[0m\n"
}
i="\033[0;33m"
e="\033[0m"

if [ "$#" -le 1 ]; then
    echo "Illegal number of parameters!"
    echo "Usage: gws-create <local-path> <repo-name> [subgroup]"
    echo "Example: gws-create projects/android/app my-super-app"
    echo "Example: gws-create projects/android/app my-super-app sample"
    exit 1
fi
cd $WORK
group=$(git branch | grep \* | cut -d ' ' -f2)
localpath=$1
reponame=$2
subgroup=$3

result=$(cat $WORK/.projects.gws | grep "$localpath/$reponame")
if [ -n "$result" ]; then
    print_error "Path $localpath/$reponame already exist, can't clone in an existing repo"
    exit 1
fi

if [[ "$group" == "master" ]]; then
    group="ghostwan.private"
else
    group="ghostwan.$group"
fi

if [ ! -f $WORK/.credential.gitlab ]; then
    print_error "Gitlab token not found!"
    read -p "Gitlab API token (https://gitlab.com/profile/personal_access_tokens): " token
    echo "$token" > $WORK/.credential.gitlab
else
    token=$(<$WORK/.credential.gitlab)
fi
printf "Create project $i'$reponame'$e in $i'$localpath'$e \n group: $i$group$e \n subgroup: $i$subgroup$e\n"
group_path=$group
if [ -n "$subgroup" ]; then
    group_path="$group/$subgroup"
fi
printf "looking namespace id for $e$group_path$i: "
id=$(curl -s --header "PRIVATE-TOKEN: $token" "https://gitlab.com/api/v4/groups" | jq '.[] | select(.full_path == "'$group_path'") | .id')
if [ -n "$id" ]; then
    printf "$i$id$e\n"
else
    gid=$(curl -s --header "PRIVATE-TOKEN: $token" "https://gitlab.com/api/v4/groups" | jq '.[] | select(.full_path == "'$group'") | .id')
    if [ -z $gid ]; then
        print_error "Group $group doesn't exist!" 
        exit 1
    fi
    print_error "Subgroup $subgroup doesn't exist!" 
    printf "Subgroup available for current group $group:\n"
    curl -s --header "PRIVATE-TOKEN: $token" "https://gitlab.com/api/v4/groups/$gid/subgroups" | jq '.[] | .path' | sed 's/"//g'
    exit 1
fi


printf "Do you want to create repostitory $i$reponame$e in $i$group_path$e ? ([Y]es or [n]o)"
read -p ": "
case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
    n|no) echo "bye!" && exit 0 ;;
    *) ;;
esac

printf "Creating $i$reponame$e..."
result=$(curl -s --header "PRIVATE-TOKEN: $token" -H "Content-Type: application/json" -d '{"name":"'$reponame'","public":"false","namespace_id":'$id'}' "https://gitlab.com/api/v4/projects")
error=$( echo $result | jq '.message.name[0]')
if [[ $error == *"has already been taken"* ]]; then
    print_error "Error: repository already exist"
    exit 1
elif [[ "$error" != "null" ]]; then
    print_error "Error: $error"
    exit 1
fi
print_ok

url=$( echo $result | jq '.http_url_to_repo' | sed 's/"//g')

printf "Adding path $localpath for repo $url in .project.gws..."

if [ -n "$(tail -c 1 "$WORK/.projects.gws")" ]; then
    echo "" >> $WORK/.projects.gws
fi

echo "$localpath/$reponame | $url" >> $WORK/.projects.gws
print_ok

printf "Fetching repo $reponame...\n"
gws-update
